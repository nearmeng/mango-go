// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: echo.proto

package echo

import (
	"context"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	_ "git.code.oa.com/trpc-go/trpc-go/http"

	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

/* ************************************ Service Definition ************************************ */

// EchoService defines service
type EchoService interface {
	Echo(ctx context.Context, req *EchoReq, rsp *EchoRsp) (err error)
}

func EchoService_Echo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &EchoReq{}
	rsp := &EchoRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(EchoService).Echo(ctx, reqbody.(*EchoReq), rspbody.(*EchoRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// EchoServer_ServiceDesc descriptor for server.RegisterService
var EchoServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.rstudio.echo.Echo",
	HandlerType: ((*EchoService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.rstudio.echo.Echo/Echo",
			Func: EchoService_Echo_Handler,
		},
	},
}

// RegisterEchoService register service
func RegisterEchoService(s server.Service, svr EchoService) {
	if err := s.Register(&EchoServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Echo register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// EchoClientProxy defines service client proxy
type EchoClientProxy interface {
	Echo(ctx context.Context, req *EchoReq, opts ...client.Option) (rsp *EchoRsp, err error)
}

type EchoClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewEchoClientProxy = func(opts ...client.Option) EchoClientProxy {
	return &EchoClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *EchoClientProxyImpl) Echo(ctx context.Context, req *EchoReq, opts ...client.Option) (rsp *EchoRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/trpc.rstudio.echo.Echo/Echo")
	msg.WithCalleeServiceName(EchoServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("rstudio")
	msg.WithCalleeServer("echo")
	msg.WithCalleeService("Echo")
	msg.WithCalleeMethod("Echo")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp = &EchoRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}
