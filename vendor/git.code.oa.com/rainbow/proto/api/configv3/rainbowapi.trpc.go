// Code generated by protoc-gen-trpc. DO NOT EDIT.
// source: rainbowapi.proto

package rainbowapi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	_ "git.code.oa.com/trpc-go/trpc-go"
	client "git.code.oa.com/trpc-go/trpc-go/client"
	codec "git.code.oa.com/trpc-go/trpc-go/codec"
	_ "git.code.oa.com/trpc-go/trpc-go/http"
	server "git.code.oa.com/trpc-go/trpc-go/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

/* ************************************ Service Definition ************************************ */
type ConfigsService interface {
	// getgroups 获取分组信息
	Getgroups(ctx context.Context, req *ReqGetGroups, rsp *RspGetGroups) error
	// getdatas 获取配置
	Getdatas(ctx context.Context, req *ReqGetDatas, rsp *RspGetDatas) error
	// getexes 获取可执行脚本
	Getexes(ctx context.Context, req *ReqGetExes, rsp *RspGetExes) error
	// poll 长轮训得到事件，用来监听事件
	// 注意:
	// 由于服务端会hold住请求60秒，所以请确保客户端访问服务端的超时时间要大于60秒
	Poll(ctx context.Context, req *ReqPoll, rsp *RspPoll) error
	// report 上报状态
	Report(ctx context.Context, req *ReqReport, rsp *RspReport) error
}

func ConfigsService_Getgroups_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ReqGetGroups{}
	rsp := &RspGetGroups{}

	filters, err := f(req)
	if err != nil {
		return nil, err
	}

	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(ConfigsService).Getgroups(ctx, reqbody.(*ReqGetGroups), rspbody.(*RspGetGroups))
	}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func ConfigsService_Getdatas_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ReqGetDatas{}
	rsp := &RspGetDatas{}

	filters, err := f(req)
	if err != nil {
		return nil, err
	}

	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(ConfigsService).Getdatas(ctx, reqbody.(*ReqGetDatas), rspbody.(*RspGetDatas))
	}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func ConfigsService_Getexes_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ReqGetExes{}
	rsp := &RspGetExes{}

	filters, err := f(req)
	if err != nil {
		return nil, err
	}

	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(ConfigsService).Getexes(ctx, reqbody.(*ReqGetExes), rspbody.(*RspGetExes))
	}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func ConfigsService_Poll_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ReqPoll{}
	rsp := &RspPoll{}

	filters, err := f(req)
	if err != nil {
		return nil, err
	}

	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(ConfigsService).Poll(ctx, reqbody.(*ReqPoll), rspbody.(*RspPoll))
	}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func ConfigsService_Report_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ReqReport{}
	rsp := &RspReport{}

	filters, err := f(req)
	if err != nil {
		return nil, err
	}

	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(ConfigsService).Report(ctx, reqbody.(*ReqReport), rspbody.(*RspReport))
	}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// ConfigsServiceServiceDesc descriptor for server.RegisterService
var ConfigsServiceDesc = server.ServiceDesc{
	ServiceName: "rainbowapi.configs",
	HandlerType: ((*ConfigsService)(nil)),
	Methods: []server.Method{
		{Name: "/rainbowapi.configs/getgroups", Func: ConfigsService_Getgroups_Handler},
		{Name: "/rainbowapi.configs/getdatas", Func: ConfigsService_Getdatas_Handler},
		{Name: "/rainbowapi.configs/getexes", Func: ConfigsService_Getexes_Handler},
		{Name: "/rainbowapi.configs/poll", Func: ConfigsService_Poll_Handler},
		{Name: "/rainbowapi.configs/report", Func: ConfigsService_Report_Handler},
	},
}

func RegisterConfigsService(s server.Service, svr ConfigsService) {
	s.Register(&ConfigsServiceDesc, svr)
}

/* ************************************ Client Definition ************************************ */
type ConfigsClientProxy interface {
	// getgroups 获取分组信息
	Getgroups(ctx context.Context, req *ReqGetGroups, opts ...client.Option) (*RspGetGroups, error)
	// getdatas 获取配置
	Getdatas(ctx context.Context, req *ReqGetDatas, opts ...client.Option) (*RspGetDatas, error)
	// getexes 获取可执行脚本
	Getexes(ctx context.Context, req *ReqGetExes, opts ...client.Option) (*RspGetExes, error)
	// poll 长轮训得到事件，用来监听事件
	// 注意:
	// 由于服务端会hold住请求60秒，所以请确保客户端访问服务端的超时时间要大于60秒
	Poll(ctx context.Context, req *ReqPoll, opts ...client.Option) (*RspPoll, error)
	// report 上报状态
	Report(ctx context.Context, req *ReqReport, opts ...client.Option) (*RspReport, error)
}

type ConfigsClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

func NewConfigsClientProxy(opts ...client.Option) ConfigsClientProxy {
	return &ConfigsClientProxyImpl{client: client.DefaultClient, opts: opts}
}

// getgroups 获取分组信息
func (c *ConfigsClientProxyImpl) Getgroups(ctx context.Context, req *ReqGetGroups, opts ...client.Option) (*RspGetGroups, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	msg.WithClientRPCName(ConfigsServiceDesc.Methods[0].Name)
	msg.WithCalleeServiceName(ConfigsServiceDesc.ServiceName)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &RspGetGroups{}
	err := c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// getdatas 获取配置
func (c *ConfigsClientProxyImpl) Getdatas(ctx context.Context, req *ReqGetDatas, opts ...client.Option) (*RspGetDatas, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	msg.WithClientRPCName(ConfigsServiceDesc.Methods[1].Name)
	msg.WithCalleeServiceName(ConfigsServiceDesc.ServiceName)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &RspGetDatas{}
	err := c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// getexes 获取可执行脚本
func (c *ConfigsClientProxyImpl) Getexes(ctx context.Context, req *ReqGetExes, opts ...client.Option) (*RspGetExes, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	msg.WithClientRPCName(ConfigsServiceDesc.Methods[2].Name)
	msg.WithCalleeServiceName(ConfigsServiceDesc.ServiceName)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &RspGetExes{}
	err := c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// poll 长轮训得到事件，用来监听事件
// 注意:
// 由于服务端会hold住请求60秒，所以请确保客户端访问服务端的超时时间要大于60秒
func (c *ConfigsClientProxyImpl) Poll(ctx context.Context, req *ReqPoll, opts ...client.Option) (*RspPoll, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	msg.WithClientRPCName(ConfigsServiceDesc.Methods[3].Name)
	msg.WithCalleeServiceName(ConfigsServiceDesc.ServiceName)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &RspPoll{}
	err := c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// report 上报状态
func (c *ConfigsClientProxyImpl) Report(ctx context.Context, req *ReqReport, opts ...client.Option) (*RspReport, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	msg.WithClientRPCName(ConfigsServiceDesc.Methods[4].Name)
	msg.WithCalleeServiceName(ConfigsServiceDesc.ServiceName)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &RspReport{}
	err := c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}
